import { Request, Response } from "express";

//import {AWSTranscriptionInformationInterface, TranscriptInterface} from "@src/interfaces";
//import { TranscriptionInformationService } from "@src/services";
//import { JobStatusEnumEnum, SentimentEnum } from "@src/enums";


export class UserController {
    static async createUser(req: Request, res: Response): Promise<Response> {
        try {
            const roleData = await role.findOne({ where: { name: "Admin" } });
        
            const userData = {
              email: req?.body ? req?.body?.email : "",
              role_id: roleData.id,
              created_by: req.user.id,
            };
        
            //check if admin name already exists
            const adminNameExists = await userProfile.findOne({ 
              where: { 
                first_name: profileData.first_name,
                last_name: profileData.last_name
              } 
            });
            if (adminNameExists) {
              return res.status(400).json({ message: "Admin with this name already exists!" });
            }
        
            const uesrData = await userService.getUserById(req.user.id);
        
            // Role-based access control checks
            if (uesrData.role.slug !== "superadmin") {
              return res.status(403).json({ message: "Only Super Admin can create Admins" });
            }
        
            // Generate verification token
            const token = await userService.createUserVerificationToken(data.id);
            const verificationLink = `${process.env.CMSURL}/email-verification/${token.token}`;
        
            // Send verification email
            const mailOptions = {
              from: "no-reply@yourdomain.com",
              to: data.email,
              subject: "Account Verification",
              html: `
                  <table class="body" border="0" cellspacing="0" cellpadding="0">
                    <tbody>
                      <tr>
                        <td>&nbsp;</td>
                        <td class="container">
                          <div class="content">
                            <table class="main">
                              <!-- START MAIN CONTENT AREA -->
                              <tbody>
                                <tr>
                                  <td class="wrapper">
                                    <table border="0" cellspacing="0" cellpadding="0">
                                      <tbody>
                                        <tr>
                                          <td>                    
                                            <p>Dear ${data.email},</p>
                                            <p>Thank you for registering on our site. Please activate your account using the link provided below.</p>
                                            <p>Activation Link: <a href="${verificationLink}">${verificationLink}</a></p>
                                            <p>If this wasn't you, please ignore this message. If you have any questions, please visit our FAQ section.</p>   
                                            <p>=============================================<br />
                                            <br />
                                            <br/>
                                            Email: info@yourdomain.com<br/>
                                            =============================================</p>
                                          </td>
                                        </tr>
                                      </tbody>
                                    </table>
                                  </td>
                                </tr>
                                <!-- END MAIN CONTENT AREA -->
                              </tbody>
                            </table>
                          </div>
                        </td>
                        <td>&nbsp;</td>
                      </tr>
                    </tbody>
                  </table>                                         
                `,
            };
        
            await sendEmail(mailOptions);


            const key: string = `lambda/${req.body.jobKeyName}.json`,
            object = await AwsS3.getObject(key),
            transcription: AWSTranscriptionInformationInterface = JSON.parse(await object.Body!.transformToString()),
            callSummary = transcription.ConversationCharacteristics.ContactSummary?.AutoGenerated?.OverallSummary.Content,
            transcript = transcription.Transcript;

            const transcribedDataExists = await new TranscriptionInformationService().findOne({ jobKeyName: req.body.jobKeyName }),
                transcribedData = await new TranscriptionInformationService().updateOne({
                    id: transcribedDataExists.id,
                    input: {
                        targetLanguageCode: transcription.LanguageCode,
                        sentiment: sentiment as SentimentEnum
                    }
                });

            return res.status(200).json({
                success: true,
                code: 200,
                message: "User created successfully."
            });
          } 
          catch (error) {
            console.error(error);
        
            //create error log
            // const errorLogData = {
            //   table: "users",
            //   type: "create",
            //   error_message: error.message,
            //   status_code: 500,
            //   status: "Internal Server Error",
            //   message: "An error occurred while creating an admin.",
            //   created_by: req.user.id,
            // };
            // await errorLogService.createErrorLog(errorLogData);
        
            return res.status(500).json({
              status: "Internal Server Error",
              status_code: 500,
              message: "An error occurred while creating the admin.",
              //error: error.message,
            });
          }
    }


}